### Basic Tutorial
cd path   # first_script.py
python first_script.py    # run the program   

python -m pip install --upgrade pip

x = 'ham'
z = 10
y = x + str(z)
y = "something %d" %z   # turn number into string
y = "a %f" %z           # turn integeer into float
y = "a %3f" %z          # decimals of 3
x = "te\n\nst"
print x                 # \n: new line; \t: tab
"ham HAm".upper()
"SUPER Baby".lower()
b = "I am ham"
b.split()
b.split("m")
b.join(a)               # join each character in a with each element in b


"san" in "sandwich"     # return True

x = ["ham",1.2]         # list
x.append(5)             # add new element into the list
x.insert(0,"burger")    # insert things in specific position
len(x)
list("ham")
z = "ham"
x.append(z)

oval_list = ["a","e","i","o","u"]
ovel_tuples = ("a","e","i","o","u")
sam = {}
sam ["weapon"] = "chainsaw"
sam ["health"] = 10
sam ["weapon"]
del sam["health"]
a = "something"
"s" in a
"s" in oval

# do while
x = 0
y = 0
while (x<10):
    x += 1
    y += 2
    print(x,y)
    if(x + y > 10):
        break
    
# for loop
x = [1,2,7]
for i in x:
    print(i)

for i in range(10,30,2):
    if not (i % 3):
        continue
    print i 

# try, exceptm, pass, finally
try:
    x = 5 + "ham"
except:
    pass
finally:
    print ("the final word")

# Python file
from random import randint


highest = 100
answer = randint(0,highest)

guess = input("Guess a number from 0 to %d: " %highest)
while (int(guess)!= answer):
    if (int(guess) < answer):
        print("Please guess higher")
    else:
        print ("Please guess lower")
    guess = input("Guess a number from 0 to %d: " %highest)
input ("Good Job!!")

# Class
class Ph:
    def __init__(self):
        self.y = 5
        z = 5           # z is local variable that cannot be stored when running function
    def printHam(self):
        print ("ham")

x = Ph()
x.pringHam()
print x.y
print x.z               # it will call an error

class Hero:
    '''
    A hero doesn't like apples
    '''
    def __init__(self,name):
        ''' 
        whatever we want...
        '''
        self.name = name
        self.health = 100
    def eat (self,food):
        if (food == 'apple'):
            self.health -= 10
        elif (food == 'ham'):
            self.health += 20

Kevin = Hero('Kevin') 
print (Kevin.name)
print (Kevin.health)
Kevin.eat('apple')
print (Kevin.health)



### Web data-mining

python -m pip install --upgrade pip
pip install bs4  
pip install requests


# in python
import bs4
from urllib.request import urlopen as uReq
from bs4 import BeautifulSoup as soup

myurl = "https://www.newegg.com/Product/ProductList.aspx?Submit=ENE&DEPA=0&Order=BESTMATCH&Description=graphic+card&ignorear=0&N=-1&isNodeId=1"
uclient = uReq(myurl)
pagehtml = uclient.read() 
uclient.close()

page_soup = soup(pagehtml,"html.parser")

# page_soup.h1  # show header of the first page
# page_soup.p   # show tag of the page

# page_soup.body.span   # show specific info

containers = page_soup.findAll("div",{"class":"item-container"})     # search item container as a class in each "div"
len(containers)     # length/number of containers
containers[0]       # show container of first subject

filename = "product.csv"
f = open(filename,"w")

headers = "brand, product_name, shipping\n"

for container in containers: 
    brand = container.div.div.a.img["title"]
    
    title_container = container.findAll("a",{"class":"item-title"})
    product_name = title_container[0].text

    shipping_container = container.findAll("li",{"class":"price-ship"})
    shipping = shipping_container[0].text.strip()

    print("brand: " + brand)
    print("product_name: " + product_name)
    print("shipping: " + shipping)


    f.write(brand+ ", " + product_name.replace(",","|") + ", " + shipping + "\n")

f.close()


# containers[0].div.div.a.img["title"]    # including href and src of pics and product title
# containers[1].div.div.a.i.findAll("",{"class":"item-rating"})

#
# python name.py        # to run the program 
#

# create twitter_credentials.py
# variables that contain the user credentials to access twitter api
ACCESS_TOKEN = ''
ACCESS_TOKEN_SECRET = ''
CONSUMER_KEY = ''
CONSUMER_SECRET = ''

# YouTube Video: https://www.youtube.com/watch?v=wlnx-7cm4Gg

# create tweepy_streamer.py
from twppey import API
from tweepy import Cursor
from tweepy.streaming import StreamListener
from tweepy import OAuthHandler
from tweepy import Stream
 
import twitter_credentials

# # # # Twitter Client # # #
class TwitterClient():
    def __init__(self, twitter_user=None):
        self.auth = TwitterAuthenticator().authenticate_twitter_app()
        self.twitter_client = API(self.auth)

        self.twitter_user = twitter_user

    def get_tweets(self, num_tweets):
        tweets = []
        for tweet in Cursor(self.twitter_client.user_timeline).items(num_tweets)
            tweets.append(tweet)
        return tweets

    def get_friend_list(self,num_friends):
        friend_list = []
        for friend in Cursor(self.twitter_client.friends).items(num_friends):
            friend_list.append(friend)
        return friend_list

    def get_home_timeline_tweets(self,):
        home_timeline_tweets = []
        for tweet in Cursor(self.twitter_client.home_timeline, id = self.twitter_user).items(num_tweets):
            home_timeline_tweets.append(tweet)
        return home_timeline_tweets


# # # # Twitter Authenticator # # #
class TwitterAuthenticator():
    
    def authenticate_twitter_app(self):
        auth = OAuthHandler(twitter_credentials.CONSUMER_KEY, twitter_credentials.CONSUMER_SECRET)
        auth.set_access_token(twitter_credentials.ACCESS_TOKEN, twitter_credentials.ACCESS_TOKEN_SECRET)
        return auth

# # # # TWITTER STREAMER # # # #
class TwitterStreamer():
    """
    Class for streaming and processing live tweets.
    """
    def __init__(self):
        self.twitter_authenticator = TwitterAuthenticator()

    def stream_tweets(self, fetched_tweets_filename, hash_tag_list):
        # This handles Twitter authetification and the connection to Twitter Streaming API
        listener = TwitterListener(fetched_tweets_filename)
        auth = self.twitter_authenticator.authenticate_twitter_app()
        stream = Stream(auth, listener)

        # This line filter Twitter Streams to capture data by the keywords: 
        stream.filter(track=hash_tag_list)


# # # # TWITTER STREAM LISTENER # # # #
class TwitterListener(StreamListener):
    """
    This is a basic listener that just prints received tweets to stdout.
    """
    def __init__(self, fetched_tweets_filename):
        self.fetched_tweets_filename = fetched_tweets_filename

    def on_data(self, data):
        try:
            print(data)
            with open(self.fetched_tweets_filename, 'a') as tf:
                tf.write(data)
            return True
        except BaseException as e:
            print("Error on_data %s" % str(e))
        return True
          

    def on_error(self, status):
        if status == 420:
            # return false on_data method in case rate limit occurs
            return False
        print(status)

 
if __name__ == '__main__':
 
    # Authenticate using config.py and connect to Twitter Streaming API.
    hash_tag_list = ["meaning", "making", "caregiver"]
    fetched_tweets_filename = "tweets.txt"

    twitter_client = TwitterClient('username')      # specify the username of the twitter account for searching
    print(twitter_client.get_user_timeline_tweets(5))   # list the most recent number of tweets 


#    twitter_streamer = TwitterStreamer()
#    twitter_streamer.stream_tweets(fetched_tweets_filename, hash_tag_list)

# YouTube Video: https://www.youtube.com/watch?v=wlnx-7cm4Gg
# Variables that contains the user credentials to access Twitter API 
ACCESS_TOKEN = ""
ACCESS_TOKEN_SECRET = ""
CONSUMER_KEY = ""
CONSUMER_SECRET = ""


# Chap01/demo_gensim.py
from gensim.summarization import summarize
import sys

fname = sys.argv[1]

with open(fname, 'r') as f:
    content = f.read()
    summary = summarize(content, split=True, word_count=100)
    for i, sentence in enumerate(summary):
        print("%d) %s" % (i+1, sentence))

# Chap01/demo_json.py
import json

if __name__ == '__main__':
    user_json = '{"user_id": "1", "name": "Marco"}'
    user_data = json.loads(user_json)
    print(user_data['name'])
    # Output: Marco

    user_data['likes'] = ['Python', 'Data Mining']
    user_json = json.dumps(user_data, indent=4)
    print(user_json)
    """
    Output: 
    {
        "user_id": "1",
        "name": "Marco",
        "likes": [
            "Python",
            "Data Mining"
        ]
    }
    """

# Chap01/demo_matplotlib.py
import matplotlib.pyplot as plt
import numpy as np

if __name__ == '__main__':
    # plot y = x^2 with red dots
    x = np.array([1, 2, 3, 4, 5])
    y = x * x
    plt.plot(x, y, 'ro')
    plt.axis([0, 6, 0, 30])
    plt.savefig('demo_plot.png')


# Chap01/demo_networkx.py
import networkx as nx
from datetime import datetime

if __name__ == '__main__':
    g = nx.Graph()
    g.add_node("John", {'name': 'John', 'age': 25})
    g.add_node("Peter", {'name': 'Peter', 'age': 35})
    g.add_node("Mary", {'name': 'Mary', 'age': 31})
    g.add_node("Lucy", {'name': 'Lucy', 'age': 19})

    g.add_edge("John", "Mary", {'type': 'friend', 'since': datetime.today()})
    g.add_edge("John", "Peter", {'type': 'friend', 'since': datetime(1990, 7, 30)})
    g.add_edge("Mary", "Lucy", {'type': 'friend', 'since': datetime(2010, 8, 10)})
    
    print(g.nodes())
    print(g.edges())
    print(g.has_edge("Lucy", "Mary"))


# Chap01/demo_numpy.py
from timeit import timeit
import numpy as np

if __name__ == '__main__':
    setup_sum = 'data = list(range(10000))'
    setup_np = 'import numpy as np;'
    setup_np += 'data_np = np.array(list(range(10000)))'
    
    run_sum = 'result = sum(data)'
    run_np = 'result = np.sum(data_np)'

    time_sum = timeit(run_sum, setup=setup_sum, number=10000)
    time_np = timeit(run_np, setup=setup_np, number=10000)

    print("Time for built-in sum(): {}".format(time_sum))
    print("Time for np.sum(): {}".format(time_np))


# Chap01/demo_sklearn.py
from sklearn import datasets
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

if __name__ == '__main__':
    # Load the data
    iris = datasets.load_iris()
    X = iris.data
    petal_length = X[:, 2]
    petal_width = X[:, 3]
    true_labels = iris.target
    # Apply KMeans clustering
    estimator = KMeans(n_clusters=3)
    estimator.fit(X)
    predicted_labels = estimator.labels_
    # Color scheme definition: red, yellow and blue
    color_scheme = ['r', 'y', 'b']
    # Markers definition: circle, "x" and "plus"
    marker_list = ['x', 'o', '+']
    # Assign colors/markers to the predicted labels
    colors_predicted_labels = [color_scheme[lab] for lab in predicted_labels]
    markers_predicted = [marker_list[lab] for lab in predicted_labels]
    # Assign colors/markers to the true labels
    colors_true_labels = [color_scheme[lab] for lab in true_labels]
    markers_true = [marker_list[lab] for lab in true_labels]
    # Plot and save the two scatter plots
    for x, y, c, m in zip(petal_width,
                          petal_length,
                          colors_predicted_labels,
                          markers_predicted):
        plt.scatter(x, y, c=c, marker=m)
    plt.savefig('iris_clusters.png')
    for x, y, c, m in zip(petal_width,
                          petal_length,
                          colors_true_labels,
                          markers_true):
        plt.scatter(x, y, c=c, marker=m)
    plt.savefig('iris_true_labels.png')

    print(iris.target_names)


